const {parse} = require("acorn");
const fs = require("node:fs");
const {Buffer} = require("node:buffer");

function all(entry, overwrite) {
  var n = read(entry);
  //if(entry==="Snap/src/locale.js")console.log(n);
  var e = getVarDeclrs(n);
  addExports(entry, overwrite, e, n, e.size > 0);
}

function read(entry) {
  var isUTF16;
  var n = fs.readFileSync(entry);
  if (JSON.stringify(n.subarray(0,2))===JSON.stringify(Buffer.from([0xff,0xfe]))) {
    isUTF16 = true;
    n = n.toString("utf16le");
  } else {
    isUTF16 = false;
    n = n.toString("utf8");
  }
  return n;
}

function getVarDeclrs(str, debug=false) {
  const a = parse(str, {ecmaVersion: 2020});
  var e = new Set();
  for (var i in a.body) {
    if ("VariableDeclaration"===a.body[i].type) {
      for (var j in a.body[i].declarations) {
        if(debug)console.log(a.body[i], a.body[i].declarations[j]);
        if (a.body[i].declarations[j].id===undefined) {continue;}
        e.add(a.body[i].declarations[j].id.name);
      }
    } else if ("FunctionDeclaration"===a.body[i].type) {
      e.add(a.body[i].id.name);
    }
  }
  return e;
}

function addExports(entry, overwrite, e, r, addE) {
    const addstring = "\n// generated by addExports.mjs\nmodule.exports = {" + Array.from(e).join(", ") + "};";
    var n;
    if (overwrite) {
      n = entry;
    } else {
      n = entry.slice(0,-3)+"-e.js";//+entry.slice(-3);
    }
    var origf = read(entry);
    fs.writeFileSync(n, addE?origf+addstring:origf, "utf8");
}

function addExportsToAllOf(overwrite, ...a) {
  for (const g of a) {
    for (const entry of fs.glob(g)) {
      all(entry, overwrite);
    }
  }
}

module.exports = {all, read, getVarDeclrs, addExports, addExportsToAllOf};

if (process.argv.length > 2) {
  addExportsToAllOf(false, process.argv.slice(2));
}
